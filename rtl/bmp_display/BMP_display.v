
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module BMP_display(
  // TODO: fill this in with interface to the rest of the processor
  input clk,
  input rst_n,
  input [9:0] x_pos,
  input x_we,
  input [8:0] y_pos,
  input y_we,
  input [7:0] cmd_in,
  input cmd_we,
  input VGA_CLK,
  
  output status,
  output VGA_BLANK_N,
  output VGA_HS,
  output VGA_SYNC_N,
  output VGA_VS,
  output [7:0] VGA_R,
  output [7:0] VGA_G,
  output [7:0] VGA_B,
  output idle
);

  reg [9:0] x_pos_r;
  always_ff @(posedge clk, negedge rst_n) begin
    if (!rst_n)
      x_pos_r <= 0;
    else if (x_we)
      x_pos_r <= x_pos;
    else
      x_pos_r <= x_pos_r;
  end

  reg [8:0] y_pos_r;
  always_ff @(posedge clk, negedge rst_n) begin
    if (!rst_n)
      y_pos_r <= 0;
    else if (y_we)
      y_pos_r <= y_pos;
    else
      y_pos_r <= y_pos_r;
  end

  ////////////////////////////////////
  // internal nets for connections //
  //////////////////////////////////
  wire [18:0] raddr;				// address into videoMem for reads
  wire [8:0] rdata;					// 9-bit color
  wire [18:0] waddr;				// write address to videoMem
  wire [8:0] wdata;					// write data to videoMem
  wire [4:0] image_indx;
  wire we;
  wire add_img,add_fnt;
  wire [5:0] fnt_indx;
  wire [9:0] xloc;
  wire [8:0] yloc;
  
  reg [18:0] count;					// generate a pulse on add_img
 
  ///////////////////////////////////////
  // Instantiate VGA Timing Generator //
  /////////////////////////////////////
  VGA_timing iVGATM(.clk25MHz(VGA_CLK), .rst_n(rst_n), .VGA_BLANK_N(VGA_BLANK_N),
                    .VGA_HS(VGA_HS),.VGA_SYNC_N(VGA_SYNC_N), .VGA_VS(VGA_VS), .addr_lead(raddr));
					
  /////////////////////////////////////
  // Instantiate 9-bit video memory //
  ///////////////////////////////////
  videoMem(.clk(clk),.we(we),.waddr(waddr),.wdata(wdata),.raddr(raddr),.rdata(rdata));
  
  assign VGA_R = {rdata[8:6],5'b00000};
  assign VGA_G = {rdata[5:3],5'b00000};
  assign VGA_B = {rdata[2:0],5'b00000};
  
  //////////////////////////////////////////////
  // Instantiate Logic that determines pixel //
  // colors based on BMP placement          //
  ///////////////////////////////////////////					
  PlaceBMP(.clk(clk),.rst_n(rst_n),.add_fnt(add_fnt),.fnt_indx(fnt_indx),
           .add_img(add_img),.rem_img(1'b0),.image_indx(image_indx),
           .xloc(xloc),.yloc(yloc),.waddr(waddr),.wdata(wdata),.we(we),.idle(idle));

  // add fnt or image
  assign add_fnt = cmd_we && ~|cmd_in[1:0];
  assign add_img = cmd_we && cmd_in[1:0] == 2'b01;
  
  // index of bmp
  assign fnt_indx = cmd_in[7:2];
  assign image_indx = cmd_in[6:2];
  
  assign xloc = x_pos;
  assign yloc = y_pos; 
	
 endmodule
  ///////////////////////////////////////////////
  // What follows is a super cheese ball method
  // of writing a few characters and images
  // using the signals to PlaceBMP.  This would
  // best be done through memory mapping PlaceBMP
  // to the databus of your processor and using
  // your processor code to write images and characters
  ///////////////////////////////////////////////
  /*always @(posedge clk, negedge rst_n)
    if (!rst_n)
	  count <= 19'h00000;
	else if (~&count)
	  count <= count + 1;
	  
  assign add_fnt = (count==19'h00005) ? 1'b1 : 
                   (count==19'h01005) ? 1'b1 :
				   (count==19'h02005) ? 1'b1 :
				   (count==19'h03005) ? 1'b1 :
				   (count==19'h04005) ? 1'b1 :
				   (count==19'h05005) ? 1'b1 :
				   1'b0;
				   
  assign fnt_indx = (count==19'h00005) ? 6'd22 : // M
                   (count==19'h01005) ? 6'd36 :  // ' '
				   (count==19'h02005) ? 6'd31 :	 // V
				   (count==19'h03005) ? 6'd28 :	 // S
				   (count==19'h04005) ? 6'd36 :  // ' '
				   (count==19'h05005) ? 6'd11 :  // B 
				   1'b0;
				   
  assign add_img = ((count==19'h07000) || (count==19'h7FFFE)) ? 1'b1 : 1'b0;
  assign image_indx = (count[18]) ? 5'h02 : 5'h01; 0 0010 01| 0 0001 01
  assign xloc = (count==19'h00005) ? 10'd256 :
                (count==19'h01005) ? 10'd269 :
				(count==19'h02005) ? 10'd282 :
				(count==19'h03005) ? 10'd295 :
				(count==19'h04005) ? 10'd308 :
				(count==19'h05005) ? 10'd321 :
                (count[18]) ? 10'h180 : 10'h40;*/
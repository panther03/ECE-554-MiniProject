   // THIS FILE IS JUST A CUT PORTION OF proc.v!!!
   // It is not intended to be a standalone Verilog module.
   // The contents are copy-pasted using `include at 
   // compile time in proc.v, hence the .0 extension.
   // It was separated for readability.

   ////////////////////////
   // fetch block wires //
   //////////////////////
   wire [15:0] pc_inc;
   wire [15:0] inst;
   wire stall, flush;
   wire fetch_err;

   /////////////////////////////
   // IF_ID transition wires //
   ///////////////////////////

   wire [15:0] IF_ID_pc_inc_in, IF_ID_pc_inc_out;
   wire [15:0] IF_ID_inst_in, IF_ID_inst_out_temp, IF_ID_inst_out;

   //////////////////////////
   // control block wires //
   ////////////////////////

   wire [6:0] op_word;
   wire ctrl_err;

   wire [3:0] AluOp;
   wire [1:0] InstFmt, JType, CondOp;
   wire RegWrite, MemWrite, MemRead,
        MemToReg, AluSrc, XtendSel,
        Exc, Rtn, Halt;

   /////////////////////////
   // decode block wires //
   ///////////////////////

   wire [15:0] reg1, reg2, imm, ofs;
   wire bypass_reg1, bypass_reg2;
   wire decode_err;

   /////////////////////////////
   // ID_EX transition wires //
   ///////////////////////////

   wire ID_EX_ctrl_RegWrite_in, ID_EX_ctrl_RegWrite_out;
   wire ID_EX_ctrl_MemWrite_in, ID_EX_ctrl_MemWrite_out;
   wire ID_EX_ctrl_MemRead_in, ID_EX_ctrl_MemRead_out;
   wire ID_EX_ctrl_MemToReg_in, ID_EX_ctrl_MemToReg_out;
   wire ID_EX_ctrl_AluSrc_in, ID_EX_ctrl_AluSrc_out;
   wire [1:0] ID_EX_ctrl_InstFmt_in, ID_EX_ctrl_InstFmt_out;
   wire [1:0] ID_EX_ctrl_CondOp_in, ID_EX_ctrl_CondOp_out;
   wire [1:0] ID_EX_ctrl_JType_in, ID_EX_ctrl_JType_out;
   wire [3:0] ID_EX_ctrl_AluOp_in, ID_EX_ctrl_AluOp_out;

   wire ID_EX_ctrl_Halt_in, ID_EX_ctrl_Halt_out;
   wire ID_EX_ctrl_Exc_in, ID_EX_ctrl_Exc_out;

   wire [15:0] ID_EX_reg1_in, ID_EX_reg1_out;
   wire [15:0] ID_EX_reg2_in, ID_EX_reg2_out;
   wire [15:0] ID_EX_ofs_in, ID_EX_ofs_out;
   wire [15:0] ID_EX_imm_in, ID_EX_imm_out;

   wire [15:0] ID_EX_pc_inc_in, ID_EX_pc_inc_out;
   wire [15:0] ID_EX_inst_in, ID_EX_inst_out;

   //////////////////////////
   // execute block wires //
   ////////////////////////

   wire [15:0] alu_out;
   wire [15:0] reg1_frwrd, reg2_frwrd;
   reg [2:0] writesel;
   wire ex_err;

   //////////////////////////////
   // EX_MEM transition wires //
   ////////////////////////////

   wire EX_MEM_ctrl_RegWrite_in, EX_MEM_ctrl_RegWrite_out;
   wire EX_MEM_ctrl_MemWrite_in, EX_MEM_ctrl_MemWrite_out;
   wire EX_MEM_ctrl_MemRead_in, EX_MEM_ctrl_MemRead_out;
   wire EX_MEM_ctrl_MemToReg_in, EX_MEM_ctrl_MemToReg_out;

   wire EX_MEM_ctrl_Halt_in, EX_MEM_ctrl_Halt_out;
   wire EX_MEM_ctrl_Exc_in, EX_MEM_ctrl_Exc_out;

   wire [15:0] EX_MEM_alu_out_in,  EX_MEM_alu_out_out;
   wire [15:0] EX_MEM_reg2_in, EX_MEM_reg2_out;
   wire [2:0] EX_MEM_writesel_in, EX_MEM_writesel_out;

   /////////////////////////
   // memory block wires //
   ///////////////////////

   wire [15:0] mem_out;

   //////////////////////////////
   // MEM_WB transition wires //
   ////////////////////////////

   wire MEM_WB_ctrl_RegWrite_in, MEM_WB_ctrl_RegWrite_out;
   wire MEM_WB_ctrl_MemToReg_in, MEM_WB_ctrl_MemToReg_out;

   wire MEM_WB_ctrl_Halt_in, MEM_WB_ctrl_Halt_out;
   wire MEM_WB_ctrl_Exc_in, MEM_WB_ctrl_Exc_out;

   wire [2:0] MEM_WB_writesel_in, MEM_WB_writesel_out;
   wire [15:0] MEM_WB_alu_out_in, MEM_WB_alu_out_out;
   wire [15:0] MEM_WB_mem_out_in, MEM_WB_mem_out_out;

   ////////////////////////////
   // writeback block wires //
   //////////////////////////

   wire [15:0] write_in;

   ////////////////////////////
   // forwarding unit wires //
   //////////////////////////

   wire frwrd_MEM_EX_opA, frwrd_MEM_EX_opB;
   wire frwrd_WB_EX_opA, frwrd_WB_EX_opB;
   wire frwrd_EX_ID_opA;